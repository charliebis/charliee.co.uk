# CICD script for Laravel sites on Abydos

image: node:latest

default:
  tags:
    - laravel
    - abydos
  artifacts:
    paths:
      - vendor/
      - node_modules/
      - vite.config.js
      - .env
      - .env.production
      - public/build/
      - .version

variables:
  VERSION: $CI_COMMIT_SHA
  DEPLOY_DIR_BASE: "/home/gitlab-ci/projects/$APP_PATH/$APP_NAME"

# List of stages for jobs, and their order of execution
stages:
  - build
  - test
  - deploy

# This job runs in the build stage, which runs first.
build-job:
  stage: build
  only:
    - main
    - master
    - staging
  before_script:
    - echo "build-job > before_script started. Preparing build environment:"
    - echo "Installing PHP"
    - apt-get update -y && apt-get install php-cli php-bcmath php-curl php-json php-mbstring php-mysql php-tokenizer php-xml php-zip -y
    - echo "Installing composer"
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php -r "if (hash_file('sha384', 'composer-setup.php') === 'e21205b207c3ff031906575712edab6f13eb0b361f2085f1f1237b7126d785e826a450292b6cfd1d64d92e6563bbde02') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
    - php composer-setup.php
    - php -r "unlink('composer-setup.php');"
    - mv composer.phar /usr/local/bin/composer
  script:
    - echo "build-job > script started. Checking build environment:"
    - echo "Node version:"
    - node -v
    - echo "NPM version:"
    - npm -v
    - echo "PHP version:"
    - php -v
    - echo "Composer version:"
    - composer -V
    - echo 'Current directory:'
    - pwd
    - composer install --optimize-autoloader --no-dev --no-interaction --prefer-dist
    - npm install
    - npm run prod
    # Inject .env and .env.production files using CI/CD variables
    - cp $ENV ./.env
    - cp $ENV_PRODUCTION ./.env.production
    # Create a text file with the version hash
    - echo $VERSION > .version
    - echo 'Build directory contents'
    - ls -la

# This job runs in the test stage.
unit-test-job:
  stage: test # It only starts when the job in the build stage completes successfully.
  only:
    - main
    - master
    - staging
  script:
    - echo "stage unit-test-job script is now running"

# This job also runs in the test stage.
lint-test-job:
  stage: test # It can run at the same time as unit-test-job (in parallel).
  only:
    - main
    - master
    - staging
  script:
    - echo "stage lint-test-job script is now running"

# This job runs in the deploy stage.
deploy-production:
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  only:
    - main
    - master
  before_script:
    - echo "deploy-production > before_script script started:"
    - echo "Installing rsync and OpenSSH"
    - apt-get update -y && apt-get install rsync openssh-client -y
    ## Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_ed25519_gitlab_deploy
    - chmod 600 ~/.ssh/id_ed25519_gitlab_deploy
    ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
    ## with your own domain name. You can copy and repeat that command if you have
    ## more than one server to connect to.
    - ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # Delete unnecessary files
    - rm .env.example .env.production.example .gitignore .gitattributes .gitlab-ci.yml
    - rm -rf .git
    # Ensure necessary dirs are present
    - echo "Creating storage/ dirs:"
    - mkdir -p storage/framework/cache/data
    - mkdir -p storage/framework/sessions
    - mkdir -p storage/framework/testing
    - mkdir -p storage/framework/views
    # Set correct file and dir permissions - owner and group need full permissions
    - find ./ -type f -exec chmod 664 {} \;
    - find ./ -type d -exec chmod 775 {} \;
  script:
    - echo "deploy-production > script script started:"
    - echo "All files and directories:"
    - ls -la
    - echo "Preparing previous directory"
    - |
      ssh gitlab-ci@$DEPLOY_HOST "
      if [ -d $DEPLOY_DIR_BASE/previous ]; then               # If $DEPLOY_DIR_BASE/previous exists
        rm -rf $DEPLOY_DIR_BASE/previous/*                    # Delete all its contents
      else
        mkdir -m 775 $DEPLOY_DIR_BASE/previous                # Else, create the directory with permissions 775
      fi
      "
    - echo "Preparing deploy directory"
    - |
      ssh gitlab-ci@$DEPLOY_HOST "
      if [ -d $DEPLOY_DIR_BASE/deploy ]; then                 # If $DEPLOY_DIR_BASE/previous exists
        rm -rf $DEPLOY_DIR_BASE/deploy/*                      # Delete all its contents
      else
        mkdir -m 775 $DEPLOY_DIR_BASE/deploy                  # Else, create the directory with permissions 775
      fi
      "
    - echo "Preparing live directory"
    - |
      ssh gitlab-ci@$DEPLOY_HOST "
      if [ ! -d $DEPLOY_DIR_BASE/live ]; then                 # Check if $DEPLOY_DIR_BASE/live doesn't exist
        mkdir -m 775 $DEPLOY_DIR_BASE/live                    # Create the directory with permissions 775
      fi
      "
    - echo "Creating deployment script"
    - |
      echo "
      if [ -d $DEPLOY_DIR_BASE/live ]; then
        if [ -n \"\$(ls -A $DEPLOY_DIR_BASE/live)\" ] && [ \$(ls -d $DEPLOY_DIR_BASE/live/* | grep ^d | wc -l) -eq 1 ]; then
          PREVIOUS_VERSION=\$(ls -d $DEPLOY_DIR_BASE/live/*/)
          PREVIOUS_VERSION=\${PREVIOUS_VERSION%?}
          PREVIOUS_VERSION=\${PREVIOUS_VERSION##*/}
          rsync -a $DEPLOY_DIR_BASE/live/\$PREVIOUS_VERSION $DEPLOY_DIR_BASE/previous/
          if [ -d $DEPLOY_DIR_BASE/deploy/$VERSION ]; then
            rsync -a $DEPLOY_DIR_BASE/deploy/$VERSION $DEPLOY_DIR_BASE/live/
            #ln -sfn $DEPLOY_DIR_BASE/live/$VERSION /var/www/$APP_PATH/$APP_NAME/
            rm -rf $DEPLOY_DIR_BASE/live/\$PREVIOUS_VERSION
          else
            echo 'Error: deploy directory does not contain the version named $VERSION'
            exit 1
          fi
        else
          if [ -d $DEPLOY_DIR_BASE/deploy/$VERSION ]; then
            rsync -a $DEPLOY_DIR_BASE/deploy/$VERSION $DEPLOY_DIR_BASE/live/
            #ln -sfn $DEPLOY_DIR_BASE/live/$VERSION /var/www/$APP_PATH/$APP_NAME/
          else
            echo 'Error: deploy directory does not contain the version named $VERSION'
            exit 1
          fi
        fi
      else
        echo 'Error: live directory does not exist'
      fi
      " > deploy.sh
    # Copy built code to the deploy directory on the server
    #- rsync -ogr ./ gitlab-ci@$DEPLOY_HOST:$DEPLOY_DIR_BASE
    - scp -r . gitlab-ci@$DEPLOY_HOST:$DEPLOY_DIR_BASE/deploy/$VERSION
    #- echo 'Known hosts'
    #- cat ~/.ssh/known_hosts
    - echo "Copied new version to server. Preparing Laravel deployment"
    - ssh gitlab-ci@$DEPLOY_HOST "cd $DEPLOY_DIR_BASE/deploy/$VERSION && php artisan optimize:clear"
    - ssh gitlab-ci@$DEPLOY_HOST "cd $DEPLOY_DIR_BASE/deploy/$VERSION && php artisan config:cache"
    - ssh gitlab-ci@$DEPLOY_HOST "cd $DEPLOY_DIR_BASE/deploy/$VERSION && php artisan event:cache"
    - ssh gitlab-ci@$DEPLOY_HOST "cd $DEPLOY_DIR_BASE/deploy/$VERSION && php artisan route:cache"
    - ssh gitlab-ci@$DEPLOY_HOST "cd $DEPLOY_DIR_BASE/deploy/$VERSION && php artisan view:cache"
    - echo "Configuring live environment"
    #- ssh gitlab-ci@$DEPLOY_HOST "DEPLOY_DIR_BASE=$DEPLOY_DIR_BASE; echo $DEPLOY_DIR_BASE/live; ls -A $DEPLOY_DIR_BASE/live"
    #- ssh gitlab-ci@$DEPLOY_HOST "echo $DEPLOY_DIR_BASE/live; ls -A $DEPLOY_DIR_BASE/live"
    # echo "CI_COMMIT_REF_SLUG is: ", $CI_COMMIT_REF_SLUG"
  after_script:
    - echo "deploy-production > after_script script started:"
