image: node:latest

default:
  tags:
    - laravel
  artifacts:
    paths:
      - vendor/
      - node_modules/
      - vite.config.js
      - .env
      - .env.production

variables:
  VERSION: $CI_COMMIT_SHA
  #NEW_VERSION_DIR: "/var/www/$APP_NAME/$VERSION"
  NEW_VERSION_DIR: "~/projects/$APP_PATH/$APP_NAME/$VERSION"
  PREVIOUS_VERSION_DIR: "/var/www/$APP_NAME/previous"

# List of stages for jobs, and their order of execution
stages:
  - build
  - test
  - deploy

# This job runs in the build stage, which runs first.
build-job:
  stage: build
  only:
    - main
    - master
    - staging
  before_script:
    - echo "build-job > before_script script started. Preparing build environment:"
    - echo "Installing PHP"
    - apt-get update -y && apt-get install php-cli php-bcmath php-curl php-json php-mbstring php-mysql php-tokenizer php-xml php-zip -y
    ## Optionally, if you will be using any Git commands, set the user name and
    ## email.
    #- git config --global user.email gitlab-deploy@charliee.co.uk
    #- git config --global user.name "Gitlab Deploy"
    ## Composer
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php -r "if (hash_file('sha384', 'composer-setup.php') === 'e21205b207c3ff031906575712edab6f13eb0b361f2085f1f1237b7126d785e826a450292b6cfd1d64d92e6563bbde02') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
    - php composer-setup.php
    - php -r "unlink('composer-setup.php');"
    - mv composer.phar /usr/local/bin/composer
  script:
    - echo "build-job > before_script script started. Checking build environment:"
    - echo "Node version:"
    - node -v
    - echo "NPM version:"
    - npm -v
    - echo "PHP version:"
    - php -v
    - echo "Composer version:"
    - composer -V
    - echo 'Current directory:'
    - pwd
    - cp $VITE_CONFIG ./vite.config.js
    - composer install --optimize-autoloader --no-dev --no-interaction --prefer-dist
    - npm install
    - npm run prod
    # Inject .env and .env.production files using CI/CD variables
    - echo "Decrypting .env file(s)"
    - php artisan env:decrypt --key=$DECRYPTION_KEY_ENV
    - php artisan env:decrypt --env=production --key=$DECRYPTION_KEY_ENV_PRODUCTION
    #- chmod -R 775 storage
    #- chmod -R 775 bootstrap/cache
    #- php artisan config:clear
    #- php artisan config:cache
    #- php artisan cache:clear
    #- php artisan event:clear
    #- php artisan route:clear
    #- php artisan event:cache
    #- php artisan route:cache
    #- ls -la ./storage/
    #- ls -la ./storage/framework/
    #- php artisan view:clear
    #- php artisan view:cache
    - echo 'Build directory contents'
    - ls -la


# This job runs in the test stage.
unit-test-job:
  stage: test # It only starts when the job in the build stage completes successfully.
  only:
    - main
    - master
    - staging
  script:
    - echo "stage unit-test-job script is now running"

# This job also runs in the test stage.
lint-test-job:
  stage: test # It can run at the same time as unit-test-job (in parallel).
  only:
    - main
    - master
    - staging
  script:
    - echo "stage lint-test-job script is now running"

# This job runs in the deploy stage.
deploy-production:
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  only:
    - main
    - master
  before_script:
    - echo "deploy-job > before_script script started:"
    - echo "Installing OpenSSH"
    - apt-get update -y && apt-get install openssh-client -y
    ## Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_ed25519_gitlab_deploy
    - chmod 600 ~/.ssh/id_ed25519_gitlab_deploy
    ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
    ## with your own domain name. You can copy and repeat that command if you have
    ## more than one server to connect to.
    - ssh-keyscan -H $IP_SERVER_PRODUCTION >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # Delete unnecessary files
    - rm .env.example .env.encrypted .env.production.encrypted
    - find . -name ".git" -exec rm -rf {} \; 2>/dev/null
    - find . -type f -name .gitignore -exec rm -f {} \; 2>/dev/null
    - find . -type f -name .gitattributes -exec rm -f {} \; 2>/dev/null
  script:
    - echo "deploy-job > script script started:"
    - echo 'Build directory contents at start of deploy-job'
    - ls -la
    - echo 'Known hosts'
    - cat ~/.ssh/known_hosts
    # Copy built code to a new directory on the deployment server
    - scp -r . gitlab-ci@$IP_SERVER_PRODUCTION:$NEW_VERSION_DIR
    # echo "CI_COMMIT_REF_SLUG is: ", $CI_COMMIT_REF_SLUG"
  after_script:
    - echo "deploy-job > after_script script started:"