# CICD script for Laravel sites on Abydos

image: node:latest

variables:
  VERSION: $CI_COMMIT_SHA
  DEPLOY_DIR_BASE: "/home/$DEPLOY_USER/projects/$APP_PATH/$APP_NAME"
  DEPLOYMENT_INFO_FILE: "deployment-info.json"

default:
  tags:
    - laravel
    - abydos
  artifacts:
    paths:
      - vendor/
      - node_modules/
      - storage/
      - vite.config.js
      #- .env
      #- .env.production
      #- public/build/
      - $DEPLOYMENT_INFO_FILE
    expire_in: 1 week

# List of stages for jobs, and their order of execution
stages:
  - build
  - test
  - deploy

# This job runs in the build stage, which runs first.
build-job:
  stage: build
  only:
    - main
    - master
    - staging
  before_script:
    - echo "build-job > before_script started. Preparing build environment:"
    - echo "Installing PHP"
    - apt-get update -y && apt-get install php-cli php-bcmath php-curl php-json php-mbstring php-mysql php-tokenizer php-xml php-zip -y
    - echo "Installing composer"
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php -r "if (hash_file('sha384', 'composer-setup.php') === 'e21205b207c3ff031906575712edab6f13eb0b361f2085f1f1237b7126d785e826a450292b6cfd1d64d92e6563bbde02') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
    - php composer-setup.php
    - php -r "unlink('composer-setup.php');"
    - mv composer.phar /usr/local/bin/composer
  script:
    - echo "build-job > script started. Checking build environment:"
    - echo "Node version:"
    - node -v
    - echo "NPM version:"
    - npm -v
    - echo "PHP version:"
    - php -v
    - echo "Composer version:"
    - composer -V
    - echo "Current directory:"
    - pwd
    # Ensure necessary dirs are present
    - echo "Creating storage/ dirs:"
    - mkdir -p storage/framework/cache/data
    - mkdir -p storage/framework/sessions
    - mkdir -p storage/framework/testing
    - mkdir -p storage/framework/views
    - mkdir -p storage/logs
    - composer install --optimize-autoloader --no-interaction --prefer-dist
    - npm install
    # Create a JSON file in the project root with some variables
    - |
      echo '{' > $DEPLOYMENT_INFO_FILE
      echo '"CI_COMMIT_TAG": "'$CI_COMMIT_TAG'",' >> $DEPLOYMENT_INFO_FILE
      echo '"CI_COMMIT_TAG_MESSAGE": "'$CI_COMMIT_TAG_MESSAGE'",' >> $DEPLOYMENT_INFO_FILE
      echo '"CI_COMMIT_TIMESTAMP": "'$CI_COMMIT_TIMESTAMP'",' >> $DEPLOYMENT_INFO_FILE
      echo '"CI_COMMIT_SHA": "'$CI_COMMIT_SHA'",' >> $DEPLOYMENT_INFO_FILE
      echo '"CI_COMMIT_SHORT_SHA": "'$CI_COMMIT_SHORT_SHA'",' >> $DEPLOYMENT_INFO_FILE
      echo '"CI_COMMIT_AUTHOR": "'$CI_COMMIT_AUTHOR'",' >> $DEPLOYMENT_INFO_FILE
      echo '"CI_COMMIT_BEFORE_SHA": "'$CI_COMMIT_BEFORE_SHA'",' >> $DEPLOYMENT_INFO_FILE
      echo '"CI_COMMIT_BRANCH": "'$CI_COMMIT_BRANCH'",' >> $DEPLOYMENT_INFO_FILE
      echo '"CI_DEFAULT_BRANCH": "'$CI_DEFAULT_BRANCH'",' >> $DEPLOYMENT_INFO_FILE
      echo '"CI_JOB_ID": "'$CI_JOB_ID'",' >> $DEPLOYMENT_INFO_FILE
      echo '"CI_PROJECT_ID": "'$CI_PROJECT_ID'",' >> $DEPLOYMENT_INFO_FILE
      echo '"CI_PROJECT_NAME": "'$CI_PROJECT_NAME'",' >> $DEPLOYMENT_INFO_FILE
      echo '"CI_PROJECT_TITLE": "'$CI_PROJECT_TITLE'",' >> $DEPLOYMENT_INFO_FILE
      echo '"CI_RUNNER_ID": "'$CI_RUNNER_ID'",' >> $DEPLOYMENT_INFO_FILE
      echo '"CI_RUNNER_DESCRIPTION": "'$CI_RUNNER_DESCRIPTION'"' >> $DEPLOYMENT_INFO_FILE
      echo '}' >> $DEPLOYMENT_INFO_FILE
    - echo 'Build directory contents'
    - ls -la

# This job runs in the test stage.
unit-test-job:
  stage: test # It only starts when the job in the build stage completes successfully.
  only:
    - main
    - master
    - staging
  before_script:
    - echo "unit-test-job > before_script started. Preparing test environment:"
    - echo "Installing PHP"
    - apt-get update -y && apt-get install php-cli php-bcmath php-curl php-json php-mbstring php-mysql php-tokenizer php-xml php-zip -y
    - echo "Installing composer"
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php -r "if (hash_file('sha384', 'composer-setup.php') === 'e21205b207c3ff031906575712edab6f13eb0b361f2085f1f1237b7126d785e826a450292b6cfd1d64d92e6563bbde02') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
    - php composer-setup.php
    - php -r "unlink('composer-setup.php');"
    - mv composer.phar /usr/local/bin/composer
  script:
    - cp $ENV_TESTING ./.env
    - ls -la
    - echo "stage unit-test-job script is now running"
    - php artisan optimize:clear
    - php artisan config:cache
    - php artisan test

# This job runs in the test stage.
lint-test-job:
  stage: test # It can run at the same time as unit-test-job.
  only:
    - main
    - master
    - staging
  script:
    - ls -la
    - echo "stage lint-test-job script is now running"
    - ./vendor/bin/pint --test -v

# This job runs in the deploy stage.
deploy-production:
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  only:
    - main
    - master
  before_script:
    - echo "deploy-production > before_script script started:"
    - echo "Installing OpenSSH"
    - apt-get update -y && apt-get install openssh-client -y
    ## Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_ed25519_gitlab_deploy
    - chmod 600 ~/.ssh/id_ed25519_gitlab_deploy
    ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
    ## with your own domain name. You can copy and repeat that command if you have
    ## more than one server to connect to.
    - ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # Delete unnecessary files
    - rm .env.example .env.production.example .gitignore .gitattributes .gitlab-ci.yml phpunit.xml phpunit.xml.bak
    - rm -rf .git
    - rm -rf tests
    # Inject .env file using CI/CD variable. .env is overwriting previous testing one
    - cp $ENV ./.env
    # Inject .env.production file
    - cp $ENV_PRODUCTION ./.env.production
    - npm run prod
    # Set correct file and dir permissions - owner and group need full permissions
    - find ./ -type f -exec chmod 664 {} \;
    - find ./ -type d -exec chmod 775 {} \;
  script:
    - echo "deploy-production > script script started:"
    - echo "All files and directories:"
    - ls -la
    # Ensure previous, deploy and live directories exist. They will exist, normally. They will only be created now
    # if this is the first deployment of this project
    - echo "Preparing previous directory"
    - |
      ssh $DEPLOY_USER@$DEPLOY_HOST "
      if [ ! -d $DEPLOY_DIR_BASE/previous ]; then             # Check if $DEPLOY_DIR_BASE/previous doesn't exist
        mkdir -m 775 $DEPLOY_DIR_BASE/previous                # Create the directory with permissions 775
      fi
      "
    - echo "Preparing deploy directory"
    - |
      ssh $DEPLOY_USER@$DEPLOY_HOST "
      if [ ! -d $DEPLOY_DIR_BASE/deploy ]; then               # Check if $DEPLOY_DIR_BASE/deploy doesn't exist
        mkdir -m 775 $DEPLOY_DIR_BASE/deploy                  # Create the directory with permissions 775
      fi
      "
    - echo "Preparing live directory"
    - |
      ssh $DEPLOY_USER@$DEPLOY_HOST "
      if [ ! -d $DEPLOY_DIR_BASE/live ]; then                 # Check if $DEPLOY_DIR_BASE/live doesn't exist
        mkdir -m 775 $DEPLOY_DIR_BASE/live                    # Create the directory with permissions 775
      fi
      "
    # The deployment script is created now but not run until after the code has been copied to the server
    - echo "Creating deployment script"
    - |
      echo "
      if [ ! -d $DEPLOY_DIR_BASE/live ] || [ ! -d $DEPLOY_DIR_BASE/previous ] || [ ! -d $DEPLOY_DIR_BASE/deploy ]; then
        echo \"Error: live and/or previous and/or deploy directories do not exist\"
        exit 1
      else
        if [ ! -d $DEPLOY_DIR_BASE/deploy/$VERSION ]; then
          echo \"Error: deploy directory does not contain the version named $VERSION\"
          exit 1
        else
          if [ -n \"\$(ls -A $DEPLOY_DIR_BASE/live)\" ] && [ \$(find $DEPLOY_DIR_BASE/live/* -maxdepth 0 -type d | wc -l) -eq 1 ]; then
            # Already 1 dir in live, meaning a live version already exists and must be copied to the previous dir
            PREVIOUS_VERSION=\$(ls -d $DEPLOY_DIR_BASE/live/*/)
            PREVIOUS_VERSION=\${PREVIOUS_VERSION%?}
            PREVIOUS_VERSION=\${PREVIOUS_VERSION##*/}
            echo \"Existing live version found: live/\$PREVIOUS_VERSION\"
            echo \"Copying existing live version to previous...\"
            rsync -a $DEPLOY_DIR_BASE/live/\$PREVIOUS_VERSION $DEPLOY_DIR_BASE/previous/
            echo \"Done\"
          fi
          # Copy the new version in deploy into live
          echo \"Copying new version to live...\"
          rsync -a $DEPLOY_DIR_BASE/deploy/$VERSION $DEPLOY_DIR_BASE/live/
          echo \"Done\"
          echo \"Running artisan commands to prepare new live version in deploy/$VERSION\"
          cd $DEPLOY_DIR_BASE/live/$VERSION && php artisan optimize:clear
          cd $DEPLOY_DIR_BASE/live/$VERSION && php artisan config:cache
          cd $DEPLOY_DIR_BASE/live/$VERSION && php artisan event:cache
          cd $DEPLOY_DIR_BASE/live/$VERSION && php artisan route:cache
          cd $DEPLOY_DIR_BASE/live/$VERSION && php artisan view:cache
          #cd $DEPLOY_DIR_BASE/live/$VERSION && php artisan migrate
          echo \"Creating symlink to point at new live version: /var/www/$APP_PATH/$APP_NAME to $DEPLOY_DIR_BASE/live/$VERSION\"
          # Recreate the symlink to point at the new version
          ln -sfn $DEPLOY_DIR_BASE/live/$VERSION /var/www/$APP_PATH/$APP_NAME
        fi
      fi
      echo \"deploy.sh has finished\"
      " > deploy.sh
    # Copy built code to the deploy directory on the live server
    - echo "Copying new version to remote host..."
    - scp -r . $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_DIR_BASE/deploy/$VERSION
    - echo "Done"
    # Configure
    - echo "Configuring live environment..."
    - ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_DIR_BASE/deploy/$VERSION && sh -x deploy.sh"
    - echo "Done"
    - echo "Deleting deploy.sh from remote host..."
    - ssh $DEPLOY_USER@$DEPLOY_HOST "cd $DEPLOY_DIR_BASE/live/$VERSION && rm deploy.sh"
    - echo "Done"
    # Clean up
    - echo "Running purge script to delete old deploy versions..."
    - ssh $DEPLOY_USER@$DEPLOY_HOST "sudo /usr/bin/purge-projects.sh $DEPLOY_USER $APP_PATH/$APP_NAME/deploy"
    - echo "Done"
    - echo "Running purge script to delete old previous versions..."
    - ssh $DEPLOY_USER@$DEPLOY_HOST "sudo /usr/bin/purge-projects.sh $DEPLOY_USER $APP_PATH/$APP_NAME/previous"
    - echo "Done"
    - echo "Running purge script to delete old live versions..."
    - ssh $DEPLOY_USER@$DEPLOY_HOST "sudo /usr/bin/purge-projects.sh $DEPLOY_USER $APP_PATH/$APP_NAME/live"
    - echo "Done"
  after_script:
    - echo "deploy-production > after_script script started:"
