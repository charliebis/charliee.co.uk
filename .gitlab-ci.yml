image: node:latest

default:
  tags:
    - laravel

variables:
  VERSION: $CI_COMMIT_SHA
  NEW_VERSION_DIR: "/var/www/$APP_NAME/$VERSION"
  PREVIOUS_VERSION_DIR: "/var/www/$APP_NAME/previous"

# List of stages for jobs, and their order of execution
stages:
  - build
  - test
  - deploy

# This job runs in the build stage, which runs first.
build-job:
  stage: build
  before_script:
    - echo "build-job > before_script script started. Preparing build environment:"
    - echo "Installing OpenSSH, Git and PHP-CLI"
    - apt-get update -y && apt-get install openssh-client git php-cli -y
    ## Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
    ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
    ## with your own domain name. You can copy and repeat that command if you have
    ## more than one server to connect to.
    - ssh-keyscan $IP_SERVER_PRODUCTION >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    ## Optionally, if you will be using any Git commands, set the user name and
    ## email.
    - git config --global user.email gitlab-deploy@charliee.co.uk
    - git config --global user.name "Gitlab Deploy"
    ## Composer
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php -r "if (hash_file('sha384', 'composer-setup.php') === 'e21205b207c3ff031906575712edab6f13eb0b361f2085f1f1237b7126d785e826a450292b6cfd1d64d92e6563bbde02') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
    - php composer-setup.php
    - php -r "unlink('composer-setup.php');"
    - mv composer.phar /usr/local/bin/composer
  script:
    - echo "build-job > before_script script started. Checking build environment:"
    - echo "Node version:"
    - node -v
    - echo "NPM version:"
    - npm -v
    - echo "PHP version:"
    - php -v
    - echo "Composer version:"
    - composer -V
    - echo 'Current directory:'
    - pwd
    - composer install --optimize-autoloader --no-dev --no-interaction --prefer-dist
    - npm install
    - npm run prod
    # Inject .env and .env.production files using CI/CD variables
    - echo "Decrypting .env file(s)"
    - php artisan env:decrypt --key=$DECRYPTION_KEY_ENV
    - php artisan env:decrypt --key=$DECRYPTION_KEY_ENV_PRODUCTION
    - echo 'Build directory contents'
    - ls -la


# This job runs in the test stage.
unit-test-job:
  stage: test # It only starts when the job in the build stage completes successfully.
  script:
    - echo "stage unit-test-job script is now running"

# This job also runs in the test stage.
lint-test-job:
  stage: test # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "stage lint-test-job script is now running"


# This job runs in the deploy stage.
deploy-job:
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "deploy-job script is now running"
  after_script:
    - echo "deploy-job after_script is now running"
